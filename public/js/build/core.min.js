const API={baseURL:"/api",async get(e){try{const t=await fetch(`${this.baseURL}${e}`);if(!t.ok)throw new Error(`API error: ${t.status}`);return await t.json()}catch(e){throw console.error("API GET Error:",e),e}},async post(e,t){try{const s=await fetch(`${this.baseURL}${e}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!s.ok){const e=await s.json();throw new Error(e.message||`API error: ${s.status}`)}return await s.json()}catch(e){throw console.error("API POST Error:",e),e}},async put(e,t){try{const s=await fetch(`${this.baseURL}${e}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!s.ok){const e=await s.json();throw new Error(e.message||`API error: ${s.status}`)}return await s.json()}catch(e){throw console.error("API PUT Error:",e),e}},async delete(e){try{const t=await fetch(`${this.baseURL}${e}`,{method:"DELETE"});if(!t.ok){const e=await t.json();throw new Error(e.message||`API error: ${t.status}`)}return await t.json()}catch(e){throw console.error("API DELETE Error:",e),e}},auth:{register:e=>API.post("/users/register",e),login:e=>API.post("/users/login",e),googleLogin(){window.location.href="/api/users/auth/google"},logout:()=>API.get("/users/logout"),getCurrentUser:()=>API.get("/users/current")},products:{getAll(e={},t=1,s=20){const r=new URLSearchParams;e.category&&r.append("category",e.category),e.search&&r.append("search",e.search),e.inStock&&r.append("inStock",e.inStock),r.append("page",t),r.append("limit",s);const d=r.toString();return API.get("/products"+(d?`?${d}`:"")).then((e=>e.products&&e.pagination?e.products:e))},getById:e=>e?API.get(`/products/${e}`):(console.error("Product ID is undefined or null"),Promise.reject(new Error("Product ID is required"))),getByCategory:e=>API.get(`/products/category/${e}`)},orders:{create:e=>API.post("/orders",e),getAll:()=>API.get("/orders"),getById:e=>API.get(`/orders/${e}`),cancel:e=>API.put(`/orders/${e}/cancel`,{})},user:{updateProfile:(e,t)=>API.put(`/users/${e}`,t),addAddress:(e,t)=>API.post(`/users/${e}/addresses`,t),updateAddress:(e,t,s)=>API.put(`/users/${e}/addresses/${t}`,s),deleteAddress:(e,t)=>API.delete(`/users/${e}/addresses/${t}`)},admin:{getDashboard:()=>API.get("/admin/dashboard"),getUsers:()=>API.get("/admin/users"),updateUserRole:(e,t)=>API.put(`/admin/users/${e}/role`,{role:t}),getOrders(e={}){const t=new URLSearchParams;e.status&&t.append("status",e.status),e.paymentStatus&&t.append("paymentStatus",e.paymentStatus),e.startDate&&t.append("startDate",e.startDate),e.endDate&&t.append("endDate",e.endDate),e.search&&t.append("search",e.search);const s=t.toString();return API.get("/admin/orders"+(s?`?${s}`:""))},updateOrderStatus:(e,t)=>API.put(`/orders/${e}/status`,{status:t}),updatePaymentStatus:(e,t,s)=>API.put(`/orders/${e}/payment`,{paymentStatus:t,transactionId:s}),updateShippingDetails:(e,t)=>API.put(`/orders/${e}/shipping`,t),createProduct:e=>API.post("/products",e),updateProduct:(e,t)=>API.put(`/products/${e}`,t),deleteProduct:e=>API.delete(`/products/${e}`),updateProductStock:(e,t)=>API.put(`/products/${e}/stock`,{stock:t}),updateProductStatus:(e,t)=>API.put(`/products/${e}/status`,{status:t}),updateShippingEstimate:(e,t)=>API.put(`/products/${e}/shipping-estimate`,{shippingEstimate:t}),getSalesReport(e={}){const t=new URLSearchParams;e.period&&t.append("period",e.period),e.startDate&&t.append("startDate",e.startDate),e.endDate&&t.append("endDate",e.endDate);const s=t.toString();return API.get("/admin/reports/sales"+(s?`?${s}`:""))},getProductReport(e={}){const t=new URLSearchParams;e.startDate&&t.append("startDate",e.startDate),e.endDate&&t.append("endDate",e.endDate);const s=t.toString();return API.get("/admin/reports/products"+(s?`?${s}`:""))}}},Auth={currentUser:null,async init(){try{const e=await this.getCurrentUser();this.updateAuthUI(e)}catch(e){console.error("Auth initialization error:",e),this.updateAuthUI(null)}this.setupEventListeners()},async getCurrentUser(){try{console.log("Fetching current user from session");const e=await API.auth.getCurrentUser();return console.log("Current user data received:",e?"User authenticated":"No user data"),this.currentUser=e,e}catch(e){throw console.error("Error fetching current user:",e.message),this.currentUser=null,e}},updateAuthUI(e){try{const t=document.querySelector(".auth-buttons"),s=document.querySelector(".user-profile"),r=document.querySelector(".admin-link"),d=document.querySelector(".user-name");if(e){t&&t.classList.add("hidden"),s&&s.classList.remove("hidden"),d&&(d.textContent=e.name),r&&("admin"===e.role?r.classList.remove("hidden"):r.classList.add("hidden"));const n=document.querySelectorAll(".auth-required-message");n&&n.length>0&&n.forEach((e=>{e.classList.add("hidden")}));const a=document.querySelectorAll(".orders-list, .account-details");a&&a.length>0&&a.forEach((e=>{e.classList.remove("hidden")})),this.loadUserData(e)}else{t&&t.classList.remove("hidden"),s&&s.classList.add("hidden"),r&&r.classList.add("hidden");const e=document.querySelectorAll(".auth-required-message");e&&e.length>0&&e.forEach((e=>{e.classList.remove("hidden")}));const d=document.querySelectorAll(".orders-list, .account-details");d&&d.length>0&&d.forEach((e=>{e.classList.add("hidden")}))}}catch(e){console.error("Error updating auth UI:",e)}},loadUserData(e){const t=document.getElementById("name"),s=document.getElementById("email");t&&s&&(t.value=e.name,s.value=e.email),this.loadAddresses(e.addresses||[]),OrdersModule.loadOrders()},loadAddresses(e){const t=document.querySelector(".addresses-list");t&&(0!==e.length?(t.innerHTML="",e.forEach((e=>{const s=document.createElement("div");s.className="address-card"+(e.isDefault?" default":""),s.dataset.id=e._id,s.innerHTML=`\n        ${e.isDefault?'<span class="default-badge">デフォルト</span>':""}\n        <div class="address-name">${e.name}</div>\n        <div class="address-details">\n          <div>${e.phone}</div>\n          <div>${e.postalCode}</div>\n          <div>${e.city} ${e.address}</div>\n        </div>\n        <div class="address-actions">\n          <button class="btn edit-address-btn" data-id="${e._id}">編集</button>\n          <button class="btn delete-address-btn" data-id="${e._id}">削除</button>\n          ${e.isDefault?"":`<button class="btn btn-primary set-default-btn" data-id="${e._id}">デフォルトに設定</button>`}\n        </div>\n      `,t.appendChild(s)})),this.setupAddressEventListeners()):t.innerHTML="<p>配送先住所が登録されていません。</p>")},setupEventListeners(){try{const e=document.getElementById("login-btn");e&&e.addEventListener("click",(()=>{this.showLoginModal()}));const t=document.getElementById("register-btn");t&&t.addEventListener("click",(()=>{this.showRegisterModal()}));const s=document.getElementById("logout-btn");s&&s.addEventListener("click",(()=>{this.logout()}));const r=document.getElementById("google-login-btn");r&&r.addEventListener("click",(()=>{this.googleLogin()}));const d=document.getElementById("login-form");d&&d.addEventListener("submit",(e=>{e.preventDefault(),this.login()}));const n=document.getElementById("register-form");n&&n.addEventListener("submit",(e=>{e.preventDefault(),this.register()}));const a=document.getElementById("switch-to-register");a&&a.addEventListener("click",(e=>{e.preventDefault(),this.showRegisterModal()}));const o=document.getElementById("switch-to-login");o&&o.addEventListener("click",(e=>{e.preventDefault(),this.showLoginModal()}));const i=document.querySelectorAll(".modal .close");i&&i.length>0&&i.forEach((e=>{e.addEventListener("click",(()=>{document.querySelectorAll(".modal").forEach((e=>{e&&(e.style.display="none")}))}))}));const c=document.querySelectorAll("#orders-login-btn, #account-login-btn");c&&c.length>0&&c.forEach((e=>{e.addEventListener("click",(()=>{this.showLoginModal()}))}));const l=document.getElementById("profile-form");l&&l.addEventListener("submit",(e=>{e.preventDefault(),this.updateProfile()}));const u=document.getElementById("add-address-btn");u&&u.addEventListener("click",(()=>{this.showAddressModal()}));const m=document.getElementById("address-form");m&&m.addEventListener("submit",(e=>{e.preventDefault(),this.saveAddress()}))}catch(e){console.error("Error setting up event listeners:",e)}},setupAddressEventListeners(){try{const e=document.querySelectorAll(".edit-address-btn");e&&e.length>0&&e.forEach((e=>{e.addEventListener("click",(()=>{const t=e.dataset.id;this.editAddress(t)}))}));const t=document.querySelectorAll(".delete-address-btn");t&&t.length>0&&t.forEach((e=>{e.addEventListener("click",(()=>{const t=e.dataset.id;this.deleteAddress(t)}))}));const s=document.querySelectorAll(".set-default-btn");s&&s.length>0&&s.forEach((e=>{e.addEventListener("click",(()=>{const t=e.dataset.id;this.setDefaultAddress(t)}))}))}catch(e){console.error("Error setting up address event listeners:",e)}},showLoginModal(){try{const e=document.getElementById("register-modal"),t=document.getElementById("login-modal"),s=document.getElementById("login-email");e&&(e.style.display="none"),t&&(t.style.display="block"),s&&s.focus()}catch(e){console.error("Error showing login modal:",e)}},showRegisterModal(){try{const e=document.getElementById("login-modal"),t=document.getElementById("register-modal"),s=document.getElementById("register-name");e&&(e.style.display="none"),t&&(t.style.display="block"),s&&s.focus()}catch(e){console.error("Error showing register modal:",e)}},googleLogin(){API.auth.googleLogin()},showAddressModal(e=null){try{const t=document.getElementById("address-modal"),s=document.getElementById("address-form");if(!t||!s)return void console.error("Address modal or form not found");const r=t.querySelector("h2");if(s.reset(),e){r&&(r.textContent="配送先住所を編集"),s.dataset.id=e._id,s.dataset.mode="edit";const t=document.getElementById("address-name"),d=document.getElementById("address-phone"),n=document.getElementById("address-street"),a=document.getElementById("address-city"),o=document.getElementById("address-postal"),i=document.getElementById("address-default");t&&(t.value=e.name),d&&(d.value=e.phone),n&&(n.value=e.address),a&&(a.value=e.city),o&&(o.value=e.postalCode),i&&(i.checked=e.isDefault)}else r&&(r.textContent="新しい配送先住所を追加"),s.dataset.id="",s.dataset.mode="add";t.style.display="block";const d=document.getElementById("address-name");d&&d.focus()}catch(e){console.error("Error showing address modal:",e)}},async login(){const e=document.getElementById("login-email").value,t=document.getElementById("login-password").value;if(e&&t)try{const s=await API.auth.login({email:e,password:t});this.currentUser=s.user,document.getElementById("login-modal").style.display="none",this.updateAuthUI(this.currentUser),alert("ログインしました。")}catch(e){alert(`ログインに失敗しました: ${e.message}`)}else alert("メールアドレスとパスワードを入力してください。")},async register(){const e=document.getElementById("register-name").value,t=document.getElementById("register-email").value,s=document.getElementById("register-password").value,r=document.getElementById("register-password-confirm").value;if(e&&t&&s&&r)if(s===r)try{await API.auth.register({name:e,email:t,password:s}),document.getElementById("register-modal").style.display="none",alert("登録が完了しました。ログインしてください。"),this.showLoginModal()}catch(e){alert(`登録に失敗しました: ${e.message}`)}else alert("パスワードが一致しません。");else alert("すべての項目を入力してください。")},async logout(){try{await API.auth.logout(),this.currentUser=null,this.updateAuthUI(null),App.showTab("home"),alert("ログアウトしました。")}catch(e){alert(`ログアウトに失敗しました: ${e.message}`)}},async updateProfile(){if(!this.currentUser)return;const e=document.getElementById("name").value,t=document.getElementById("email").value;if(e&&t)try{const s=await API.user.updateProfile(this.currentUser.id,{name:e,email:t});this.currentUser=s,this.updateAuthUI(this.currentUser),alert("プロフィールを更新しました。")}catch(e){alert(`プロフィールの更新に失敗しました: ${e.message}`)}else alert("名前とメールアドレスを入力してください。")},async saveAddress(){if(!this.currentUser)return;const e=document.getElementById("address-form"),t=e.dataset.mode,s=e.dataset.id,r={name:document.getElementById("address-name").value,phone:document.getElementById("address-phone").value,address:document.getElementById("address-street").value,city:document.getElementById("address-city").value,postalCode:document.getElementById("address-postal").value,isDefault:document.getElementById("address-default").checked};if(r.name&&r.phone&&r.address&&r.city&&r.postalCode)try{let e;e="add"===t?await API.user.addAddress(this.currentUser.id,r):await API.user.updateAddress(this.currentUser.id,s,r),this.currentUser.addresses=e.addresses,document.getElementById("address-modal").style.display="none",this.loadAddresses(this.currentUser.addresses),alert("add"===t?"住所を追加しました。":"住所を更新しました。")}catch(e){alert(`住所の${"add"===t?"追加":"更新"}に失敗しました: ${e.message}`)}else alert("すべての項目を入力してください。")},editAddress(e){if(!this.currentUser||!this.currentUser.addresses)return;const t=this.currentUser.addresses.find((t=>t._id===e));t&&this.showAddressModal(t)},async deleteAddress(e){if(this.currentUser&&confirm("この住所を削除してもよろしいですか？"))try{const t=await API.user.deleteAddress(this.currentUser.id,e);this.currentUser.addresses=t.addresses,this.loadAddresses(this.currentUser.addresses),alert("住所を削除しました。")}catch(e){alert(`住所の削除に失敗しました: ${e.message}`)}},async setDefaultAddress(e){if(this.currentUser)try{const t=this.currentUser.addresses.find((t=>t._id===e));if(!t)return;const s=await API.user.updateAddress(this.currentUser.id,e,{...t,isDefault:!0});this.currentUser.addresses=s.addresses,this.loadAddresses(this.currentUser.addresses),alert("デフォルトの住所を設定しました。")}catch(e){alert(`デフォルト住所の設定に失敗しました: ${e.message}`)}},isAuthenticated(){return!!this.currentUser},isAdmin(){return this.currentUser&&"admin"===this.currentUser.role},getUserId(){return this.currentUser?this.currentUser.id:null}},ProductsModule={products:[],featuredProducts:[],cacheExpirationTime:3e5,lastCacheUpdate:0,async init(){await this.fetchProducts(),this.setupEventListeners()},productsCache:null,cacheDuration:3e5,cacheTimestamp:0,async loadProducts(){try{const e=document.getElementById("category-select"),t=document.getElementById("product-search"),s=document.getElementById("in-stock-only"),r={category:e?e.value:"",search:t?t.value:"",inStock:s&&s.checked?"true":""};!r.category&&!r.search&&!r.inStock&&this.productsCache&&Date.now()-this.cacheTimestamp<this.cacheDuration?(console.log("Using cached products data"),this.products=this.productsCache):(console.log("Fetching products from API"),this.products=await API.products.getAll(r),r.category||r.search||r.inStock||(this.productsCache=this.products,this.cacheTimestamp=Date.now())),this.renderProducts(this.products,"all-products-grid")}catch(e){console.error("Load products error:",e),document.getElementById("all-products-grid").innerHTML="<p>商品の読み込みに失敗しました。</p>"}},async fetchProducts(){try{this.productsCache&&Date.now()-this.lastCacheUpdate<this.cacheExpirationTime?(console.log("Using cached products data"),this.products=this.productsCache):(console.log("Fetching products from API"),this.products=await API.products.getAll(),this.productsCache=this.products,this.lastCacheUpdate=Date.now()),this.loadProducts(),this.loadFeaturedProducts()}catch(e){console.error("Fetch products error:",e)}},async loadFeaturedProducts(){try{if(this.productsCache&&Date.now()-this.cacheTimestamp<this.cacheDuration)console.log("Using cached products for featured products"),this.featuredProducts=this.productsCache.slice(0,4);else if(this.products&&this.products.length>0)console.log("Using current products for featured products"),this.featuredProducts=this.products.slice(0,4);else{console.log("Fetching products for featured products");const e=await API.products.getAll();this.featuredProducts=e.slice(0,4),this.productsCache=e,this.cacheTimestamp=Date.now()}this.renderProducts(this.featuredProducts,"featured-products-grid")}catch(e){console.error("Load featured products error:",e),document.getElementById("featured-products-grid").innerHTML="<p>おすすめ商品の読み込みに失敗しました。</p>"}},renderProducts(e,t){const s=document.getElementById(t);if(s)if(0!==e.length){if(s.innerHTML="","all-products-grid"===t){const e=document.querySelector(".start-order-container");e&&e.remove();const t=document.createElement("div");t.className="start-order-container",t.innerHTML='\n        <button class="btn btn-primary btn-large start-order-btn">注文を開始する</button>\n      ',s.parentNode.insertBefore(t,s.nextSibling)}e.forEach((e=>{const t=document.createElement("div");t.className="product-card",t.dataset.id=e._id;const r=e.images&&e.images.length>0?e.images[0]:"images/placeholder.jpg",d=new Intl.NumberFormat("ja-JP",{style:"currency",currency:"JPY"}).format(e.price),n=e.stock>0?"":'<span style="color: red;">在庫切れ</span>';let a="";"販売中"!==e.status&&(a=`<div class="product-status">${e.status}</div>`),t.innerHTML=`\n        <img src="${r}" alt="${e.name}" class="product-image">\n        <div class="product-info">\n          <h3 class="product-name">${e.name} <span class="product-unit">(${e.unit})</span></h3>\n          <div class="product-price">${d}</div>\n          ${n?`<div class="product-stock">${n}</div>`:""}\n          <div class="product-shipping-estimate"><i class="fas fa-truck"></i> ${e.shippingEstimate}</div>\n          ${a}\n          <div class="product-actions">\n            <button class="btn view-product-btn" data-id="${e._id}">\n              詳細\n            </button>\n          </div>\n        </div>\n      `,s.appendChild(t)})),this.setupProductButtonListeners()}else s.innerHTML="<p>商品が見つかりませんでした。</p>"},setupEventListeners(){document.addEventListener("click",(e=>{e.target.classList.contains("start-order-btn")&&(e.preventDefault(),window.location.href="/order.html")}));const e=document.getElementById("category-select");e&&e.addEventListener("change",(()=>{this.loadProducts()}));const t=document.getElementById("product-search"),s=document.getElementById("search-btn");t&&s&&(s.addEventListener("click",(()=>{this.loadProducts()})),t.addEventListener("keypress",(e=>{"Enter"===e.key&&this.loadProducts()})));const r=document.getElementById("in-stock-only");r&&r.addEventListener("change",(()=>{this.loadProducts()})),document.querySelectorAll(".category-card").forEach((t=>{t.addEventListener("click",(()=>{const s=t.dataset.category;e&&(e.value=s),App.showTab("products"),this.loadProducts()}))})),document.querySelectorAll('[data-action="shop-now"]').forEach((e=>{e.addEventListener("click",(()=>{App.showTab("products")}))}));const d=document.getElementById("product-modal");d&&d.querySelector(".close").addEventListener("click",(()=>{d.style.display="none"}))},setupProductButtonListeners(){console.log("Setting up product button listeners");const e=document.querySelectorAll(".view-product-btn");e&&e.length>0&&e.forEach((e=>{e.addEventListener("click",(t=>{t.stopPropagation();const s=e.dataset.id;if(console.log("View product button clicked for product ID:",s),!s)return console.error("Product ID is missing from view-product button"),void alert("商品IDが見つかりません。");this.showProductDetails(s)}))}));const t=document.querySelectorAll(".product-card");t&&t.length>0&&t.forEach((e=>{e.addEventListener("click",(()=>{const t=e.dataset.id;if(console.log("Product card clicked for product ID:",t),!t)return console.error("Product ID is missing from product card"),void alert("商品IDが見つかりません。");this.showProductDetails(t)}))}))},async showProductDetails(e){try{if(console.log("Fetching product details for ID:",e),!e)throw new Error("Product ID is missing");const t=await API.products.getById(e);if(console.log("Product details received:",t),!t)throw new Error("Product data is empty or invalid");const s=document.getElementById("product-modal");if(!s)throw new Error("Product modal element not found");const r=s.querySelector(".product-details");if(!r)throw new Error("Product details element not found in modal");const d=t.images&&t.images.length>0?t.images[0]:"images/placeholder.jpg",n=new Intl.NumberFormat("ja-JP",{style:"currency",currency:"JPY"}).format(t.price),a=t.stock>0?"":'<span style="color: red;">在庫切れ</span>';let o="";"販売中"!==t.status&&(o=`<div class="product-detail-status">${t.status}</div>`);let i="";"販売中"===t.status&&(i=`<div class="product-detail-shipping">\n          <i class="fas fa-truck"></i> ${t.shippingEstimate}\n        </div>`),r.innerHTML=`\n        <img src="${d}" alt="${t.name}" class="product-detail-image">\n        <div class="product-detail-info">\n          <h2 class="product-detail-name">${t.name} <span class="product-unit">(${t.unit})</span></h2>\n          <div class="product-detail-price">${n}</div>\n          ${a?`<div class="product-detail-stock">${a}</div>`:""}\n          ${o}\n          ${i}\n          <div class="product-detail-description">${t.description}</div>\n        </div>\n      `,s.style.display="block"}catch(e){console.error("Show product details error:",e),alert("商品詳細の読み込みに失敗しました。")}},getProductById(e){return this.products.find((t=>t._id===e))||null}},OrdersModule={orders:[],async init(){this.setupEventListeners(),Auth.isAuthenticated()&&await this.loadOrders()},async loadOrders(){try{if(!Auth.isAuthenticated())return;this.orders=await API.orders.getAll(),this.renderOrders()}catch(e){console.error("Load orders error:",e),document.querySelector(".orders-list").innerHTML="<p>注文履歴の読み込みに失敗しました。</p>"}},renderOrders(){const e=document.querySelector(".orders-list");if(!e)return;if(0===this.orders.length)return void(e.innerHTML="<p>注文履歴がありません。</p>");e.innerHTML="";[...this.orders].sort(((e,t)=>new Date(t.createdAt)-new Date(e.createdAt))).forEach((t=>{const s=document.createElement("div");s.className="order-card",s.dataset.id=t._id;const r=new Date(t.createdAt),d=new Intl.DateTimeFormat("ja-JP",{year:"numeric",month:"long",day:"numeric",hour:"2-digit",minute:"2-digit"}).format(r),n=new Intl.NumberFormat("ja-JP",{style:"currency",currency:"JPY"}).format(t.totalAmount),a=this.getStatusClass(t.status),o=this.getStatusText(t.status),i=document.createElement("div");i.className="order-header",i.innerHTML=`\n        <div class="order-id">注文番号: ${t._id}</div>\n        <div class="order-date">${d}</div>\n        <div class="order-status ${a}">${o}</div>\n      `;const c=document.createElement("div");c.className="order-body";const l=document.createElement("div");l.className="order-items",t.items.forEach((e=>{const t=document.createElement("div");t.className="order-item";const s=e.product;if(!s)return;const r=s.images&&s.images.length>0?s.images[0]:"images/placeholder.jpg",d=new Intl.NumberFormat("ja-JP",{style:"currency",currency:"JPY"}).format(e.price);t.innerHTML=`\n          <img src="${r}" alt="${s.name}" class="order-item-image">\n          <div class="order-item-details">\n            <div class="order-item-name">${s.name}</div>\n            <div class="order-item-price">${d} × ${e.quantity}</div>\n            <div class="order-item-quantity">配送先: ${e.shippingAddress.name}</div>\n          </div>\n        `,l.appendChild(t)}));const u=document.createElement("div");u.className="order-total",u.textContent=`合計: ${n}`;const m=document.createElement("div");m.className="order-actions";const h=document.createElement("button");if(h.className="btn",h.textContent="詳細を見る",h.dataset.id=t._id,m.appendChild(h),"pending"===t.status||"processing"===t.status){const e=document.createElement("button");e.className="btn",e.textContent="キャンセル",e.dataset.id=t._id,m.appendChild(e),e.addEventListener("click",(e=>{e.stopPropagation(),this.cancelOrder(t._id)}))}h.addEventListener("click",(e=>{e.stopPropagation(),this.viewOrderDetails(t._id)})),c.appendChild(l),c.appendChild(u),c.appendChild(m),s.appendChild(i),s.appendChild(c),e.appendChild(s)}))},getStatusClass(e){switch(e){case"pending":return"pending";case"processing":return"processing";case"shipped":return"shipped";case"delivered":return"delivered";case"cancelled":return"cancelled";default:return""}},getStatusText(e){switch(e){case"pending":return"受付中";case"processing":return"準備中";case"shipped":return"発送済み";case"delivered":return"配達済み";case"cancelled":return"キャンセル";default:return e}},setupEventListeners(){},async viewOrderDetails(e){try{const t=await API.orders.getById(e),s=document.createElement("div");s.className="modal",s.id="order-details-modal";const r=new Date(t.createdAt),d=new Intl.DateTimeFormat("ja-JP",{year:"numeric",month:"long",day:"numeric",hour:"2-digit",minute:"2-digit"}).format(r),n=new Intl.NumberFormat("ja-JP",{style:"currency",currency:"JPY"}).format(t.totalAmount),a=this.getStatusClass(t.status),o=this.getStatusText(t.status),i=this.getPaymentStatusText(t.paymentStatus),c=this.getPaymentMethodText(t.paymentMethod);s.innerHTML=`\n        <div class="modal-content">\n          <span class="close">&times;</span>\n          <h2>注文詳細</h2>\n          <div class="order-details">\n            <div class="order-details-header">\n              <div class="order-details-id">注文番号: ${t._id}</div>\n              <div class="order-details-date">注文日時: ${d}</div>\n              <div class="order-details-status ${a}">${o}</div>\n            </div>\n            <div class="order-details-section">\n              <h3>注文商品</h3>\n              <div class="order-details-items">\n                ${t.items.map((e=>{const t=e.product;if(!t)return"";const s=new Intl.NumberFormat("ja-JP",{style:"currency",currency:"JPY"}).format(e.price);return`\n                    <div class="order-details-item">\n                      <div class="order-details-item-name">${t.name}</div>\n                      <div class="order-details-item-price">${s} × ${e.quantity}</div>\n                      <div class="order-details-item-subtotal">${new Intl.NumberFormat("ja-JP",{style:"currency",currency:"JPY"}).format(e.price*e.quantity)}</div>\n                    </div>\n                  `})).join("")}\n              </div>\n            </div>\n            <div class="order-details-section">\n              <h3>配送先住所</h3>\n              <div class="order-details-addresses">\n                ${t.items.map((e=>{const t=e.shippingAddress;return t?`\n                    <div class="order-details-address">\n                      <div class="order-details-address-product">${e.product.name} (${e.quantity})</div>\n                      <div class="order-details-address-name">${t.name}</div>\n                      <div class="order-details-address-phone">${t.phone}</div>\n                      <div class="order-details-address-location">${t.postalCode} ${t.city} ${t.address}</div>\n                    </div>\n                  `:""})).join("")}\n              </div>\n            </div>\n            <div class="order-details-section">\n              <h3>支払い情報</h3>\n              <div class="order-details-payment">\n                <div class="order-details-payment-method">支払い方法: ${c}</div>\n                <div class="order-details-payment-status">支払い状況: ${i}</div>\n                ${t.paymentDetails&&t.paymentDetails.transactionId?`\n                  <div class="order-details-payment-transaction">取引ID: ${t.paymentDetails.transactionId}</div>\n                `:""}\n              </div>\n            </div>\n            <div class="order-details-section">\n              <h3>配送情報</h3>\n              <div class="order-details-shipping">\n                ${t.shippingDetails&&t.shippingDetails.carrier?`\n                  <div class="order-details-shipping-carrier">配送業者: ${t.shippingDetails.carrier}</div>\n                `:"配送情報はまだありません。"}\n                ${t.shippingDetails&&t.shippingDetails.trackingNumber?`\n                  <div class="order-details-shipping-tracking">追跡番号: ${t.shippingDetails.trackingNumber}</div>\n                `:""}\n                ${t.shippingDetails&&t.shippingDetails.estimatedDelivery?`\n                  <div class="order-details-shipping-delivery">配送予定日: ${new Intl.DateTimeFormat("ja-JP",{year:"numeric",month:"long",day:"numeric"}).format(new Date(t.shippingDetails.estimatedDelivery))}</div>\n                `:""}\n              </div>\n            </div>\n            <div class="order-details-section">\n              <h3>合計金額</h3>\n              <div class="order-details-total">\n                <div class="order-details-total-row">\n                  <span>小計:</span>\n                  <span>${n}</span>\n                </div>\n                <div class="order-details-total-row">\n                  <span>配送料:</span>\n                  <span>¥500</span>\n                </div>\n                <div class="order-details-total-row total">\n                  <span>合計:</span>\n                  <span>${new Intl.NumberFormat("ja-JP",{style:"currency",currency:"JPY"}).format(t.totalAmount+500)}</span>\n                </div>\n              </div>\n            </div>\n            ${"pending"===t.status||"processing"===t.status?`\n              <div class="order-details-actions">\n                <button class="btn" id="order-details-cancel-btn" data-id="${t._id}">注文をキャンセル</button>\n              </div>\n            `:""}\n          </div>\n        </div>\n      `,document.body.appendChild(s),s.style.display="block",s.querySelector(".close").addEventListener("click",(()=>{s.style.display="none",s.remove()}));const l=s.querySelector("#order-details-cancel-btn");l&&l.addEventListener("click",(()=>{this.cancelOrder(e),s.style.display="none",s.remove()})),window.addEventListener("click",(e=>{e.target===s&&(s.style.display="none",s.remove())}))}catch(e){console.error("View order details error:",e),alert("注文詳細の読み込みに失敗しました。")}},getPaymentStatusText(e){switch(e){case"pending":return"未払い";case"paid":return"支払い済み";case"failed":return"支払い失敗";case"refunded":return"返金済み";default:return e}},getPaymentMethodText(e){switch(e){case"credit_card":return"クレジットカード";case"bank_transfer":return"銀行振込";case"cash_on_delivery":return"代金引換";default:return e}},async cancelOrder(e){try{if(!confirm("この注文をキャンセルしてもよろしいですか？"))return;await API.orders.cancel(e),await this.loadOrders(),alert("注文をキャンセルしました。")}catch(e){console.error("Cancel order error:",e),alert(`注文のキャンセルに失敗しました: ${e.message}`)}}},App={async init(){this.setupEventListeners(),await Auth.init(),await ProductsModule.init(),await OrdersModule.init(),Auth.isAdmin()&&"undefined"!=typeof AdminModule&&await AdminModule.init()},setupEventListeners(){document.querySelectorAll(".nav-links a").forEach((e=>{e.addEventListener("click",(t=>{t.preventDefault();const s=e.dataset.tab;this.showTab(s)}))})),window.addEventListener("click",(e=>{document.querySelectorAll(".modal").forEach((t=>{e.target===t&&(t.style.display="none")}))}))},showTab(e){console.log("Showing tab:",e),document.querySelectorAll(".nav-links a").forEach((e=>{e.classList.remove("active")}));const t=document.querySelector(`.nav-links a[data-tab="${e}"]`);if(t&&t.classList.add("active"),document.querySelectorAll(".tab-content").forEach((e=>{e.classList.remove("active")})),document.getElementById(e).classList.add("active"),"admin"===e)if(console.log("Loading admin dashboard"),"undefined"!=typeof AdminModule)try{if("undefined"!=typeof AdminCore&&"function"==typeof AdminCore.showAdminTab)return console.log('Using AdminCore.showAdminTab("dashboard")'),void AdminCore.showAdminTab("dashboard");"function"==typeof AdminModule.loadDashboard?(console.log("Calling AdminModule.loadDashboard()"),AdminModule.loadDashboard()):"function"!=typeof AdminModule.init||AdminModule._initialized?console.error("No valid method found to load admin dashboard"):(console.log("Initializing AdminModule from App.showTab"),AdminModule._initialized=!0,AdminModule.init().then((()=>{console.log("AdminModule initialized, showing dashboard"),"undefined"!=typeof AdminCore&&"function"==typeof AdminCore.showAdminTab&&AdminCore.showAdminTab("dashboard")})))}catch(e){console.error("Error loading admin dashboard:",e)}else console.error("AdminModule is not defined - check script loading order")},showError(e){alert(e)},showSuccess(e){alert(e)}};document.addEventListener("DOMContentLoaded",(()=>{App.init()}));