const AdminModule={_initialized:!1,async init(){console.log("Admin module initialized"),await AdminCore.init(),this._initialized=!0},showAdminTab(t){AdminCore&&"function"==typeof AdminCore.showAdminTab?AdminCore.showAdminTab(t):console.error("AdminCore not available or showAdminTab not defined")},loadDashboard(){AdminDashboard&&"function"==typeof AdminDashboard.loadDashboard?AdminDashboard.loadDashboard():console.error("AdminDashboard not available or loadDashboard not defined")},loadOrders(){AdminOrders&&"function"==typeof AdminOrders.loadOrders?AdminOrders.loadOrders():console.error("AdminOrders not available or loadOrders not defined")},loadProducts(){AdminProducts&&"function"==typeof AdminProducts.loadProducts?AdminProducts.loadProducts():console.error("AdminProducts not available or loadProducts not defined")},loadUsers(){AdminUsers&&"function"==typeof AdminUsers.loadUsers?AdminUsers.loadUsers():console.error("AdminUsers not available or loadUsers not defined")},loadReports(){AdminReports&&"function"==typeof AdminReports.loadReports?AdminReports.loadReports():console.error("AdminReports not available or loadReports not defined")}};document.addEventListener("DOMContentLoaded",(()=>{document.querySelector("#admin")&&AdminModule.init()}));const AdminCore={dashboardData:null,users:[],orders:[],products:[],salesReport:null,productReport:null,async init(){Auth.isAdmin()&&(this.setupEventListeners(),await AdminDashboard.loadDashboard())},setupEventListeners(){console.log("Setting up admin event listeners");try{const t=document.getElementById("admin");if(!t)return void console.warn("Admin section not found in DOM. Skipping event listener setup.");const e=t.querySelectorAll(".admin-tab-btn");console.log("Found admin tab buttons:",e?e.length:0),e&&e.length>0?e.forEach((t=>{t&&"function"==typeof t.addEventListener&&(console.log("Adding click listener to button:",t.dataset.adminTab),t.addEventListener("click",(()=>{console.log("Admin tab button clicked:",t.dataset.adminTab);const e=t.dataset.adminTab;this.showAdminTab(e)})))})):console.warn("No admin tab buttons found. Admin functionality may be limited.")}catch(t){console.error("Error setting up admin event listeners:",t)}},async showAdminTab(t){try{const e=document.getElementById("admin");if(!e)return void console.warn("Admin section not found in DOM. Cannot show tab.");const n=e.querySelectorAll(".admin-tab-btn");n&&n.length>0&&n.forEach((t=>{t&&void 0!==t.classList&&"function"==typeof t.classList.remove&&t.classList.remove("active")}));const a=e.querySelector(`.admin-tab-btn[data-admin-tab="${t}"]`);a&&void 0!==a.classList&&"function"==typeof a.classList.add?a.classList.add("active"):console.warn(`Admin tab button for "${t}" not found or classList not available`);const s=e.querySelectorAll(".admin-tab-panel");s&&s.length>0&&s.forEach((t=>{t&&void 0!==t.classList&&"function"==typeof t.classList.remove&&t.classList.remove("active")}));const d=document.getElementById(`admin-${t}`);switch(d&&void 0!==d.classList&&"function"==typeof d.classList.add?d.classList.add("active"):console.warn(`Admin tab panel for "${t}" not found or classList not available`),t){case"dashboard":void 0!==AdminDashboard&&"function"==typeof AdminDashboard.loadDashboard?await AdminDashboard.loadDashboard():console.warn("AdminDashboard module not available");break;case"orders":void 0!==AdminOrders&&"function"==typeof AdminOrders.loadOrders?await AdminOrders.loadOrders():console.warn("AdminOrders module not available");break;case"products":void 0!==AdminProducts&&"function"==typeof AdminProducts.loadProducts?await AdminProducts.loadProducts():console.warn("AdminProducts module not available");break;case"users":void 0!==AdminUsers&&"function"==typeof AdminUsers.loadUsers?await AdminUsers.loadUsers():console.warn("AdminUsers module not available");break;case"reports":void 0!==AdminReports&&"function"==typeof AdminReports.loadReports?await AdminReports.loadReports():console.warn("AdminReports module not available")}}catch(e){console.error(`Error showing admin tab "${t}":`,e)}},getStatusText(t){switch(t){case"pending":return"受付中";case"processing":return"準備中";case"shipped":return"発送済み";case"delivered":return"配達済み";case"cancelled":return"キャンセル";default:return"不明"}},getStatusClass(t){switch(t){case"pending":return"status-pending";case"processing":return"status-processing";case"shipped":return"status-shipped";case"delivered":return"status-delivered";case"cancelled":return"status-cancelled";default:return""}},getPaymentStatusText(t){switch(t){case"pending":return"未払い";case"paid":return"支払い済み";case"failed":return"支払い失敗";case"refunded":return"返金済み";default:return"不明"}},getPaymentMethodText(t){switch(t){case"credit_card":return"クレジットカード";case"bank_transfer":return"銀行振込";case"cash_on_delivery":return"代金引換";default:return"不明"}},getCategoryText(t){switch(t){case"アスパラ":return"アスパラ";case"はちみつ":return"はちみつ";case"vegetables":return"野菜";case"fruits":return"果物";case"grains":return"穀物";case"dairy":return"乳製品";case"other":return"その他";default:return"不明"}}},AdminDashboard={async loadDashboard(){try{if(!Auth.isAdmin())return;AdminCore.dashboardData=await API.admin.getDashboard(),this.renderDashboard()}catch(t){console.error("Load dashboard error:",t),document.getElementById("admin-dashboard").innerHTML="<p>ダッシュボードの読み込みに失敗しました。</p>"}},renderDashboard(){const t=document.getElementById("admin-dashboard");t&&AdminCore.dashboardData&&(t.innerHTML=`\n      <div class="dashboard-stats">\n        <div class="stat-card">\n          <div class="stat-value">${AdminCore.dashboardData.orderStats.totalOrders}</div>\n          <div class="stat-label">総注文数</div>\n        </div>\n        <div class="stat-card">\n          <div class="stat-value">${AdminCore.dashboardData.orderStats.pendingOrders}</div>\n          <div class="stat-label">受付中の注文</div>\n        </div>\n        <div class="stat-card">\n          <div class="stat-value">${AdminCore.dashboardData.orderStats.processingOrders}</div>\n          <div class="stat-label">準備中の注文</div>\n        </div>\n        <div class="stat-card">\n          <div class="stat-value">${new Intl.NumberFormat("ja-JP",{style:"currency",currency:"JPY"}).format(AdminCore.dashboardData.orderStats.totalRevenue)}</div>\n          <div class="stat-label">総売上</div>\n        </div>\n      </div>\n      \n      <div class="admin-section">\n        <h3>最近の注文</h3>\n        <table class="admin-table">\n          <thead>\n            <tr>\n              <th>注文番号</th>\n              <th>顧客</th>\n              <th>日時</th>\n              <th>金額</th>\n              <th>状態</th>\n              <th>アクション</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${AdminCore.dashboardData.recentOrders.map((t=>`\n              <tr>\n                <td>${t._id}</td>\n                <td>${t.user?t.user.name:"不明"}</td>\n                <td>${new Date(t.createdAt).toLocaleString("ja-JP")}</td>\n                <td>${new Intl.NumberFormat("ja-JP",{style:"currency",currency:"JPY"}).format(t.totalAmount)}</td>\n                <td>${AdminCore.getStatusText(t.status)}</td>\n                <td>\n                  <div class="admin-actions">\n                    <button class="btn view-order-btn" data-id="${t._id}">詳細</button>\n                  </div>\n                </td>\n              </tr>\n            `)).join("")}\n          </tbody>\n        </table>\n        <button class="btn" id="view-all-orders-btn">すべての注文を表示</button>\n      </div>\n      \n      <div class="admin-section">\n        <h3>在庫切れ間近の商品</h3>\n        <table class="admin-table">\n          <thead>\n            <tr>\n              <th>商品名</th>\n              <th>カテゴリ</th>\n              <th>在庫数</th>\n              <th>アクション</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${AdminCore.dashboardData.lowStockProducts.map((t=>`\n              <tr>\n                <td>${t.name}</td>\n                <td>${AdminCore.getCategoryText(t.category)}</td>\n                <td>${t.stock} ${t.unit}</td>\n                <td>\n                  <div class="admin-actions">\n                    <button class="btn update-stock-btn" data-id="${t._id}">在庫更新</button>\n                  </div>\n                </td>\n              </tr>\n            `)).join("")}\n          </tbody>\n        </table>\n        <button class="btn" id="view-all-products-btn">すべての商品を表示</button>\n      </div>\n    `,this.setupDashboardEventListeners())},setupDashboardEventListeners(){document.querySelectorAll(".view-order-btn").forEach((t=>{t.addEventListener("click",(()=>{const e=t.dataset.id;AdminOrders.viewOrderDetails(e)}))})),document.querySelectorAll(".update-stock-btn").forEach((t=>{t.addEventListener("click",(()=>{const e=t.dataset.id;AdminProducts.showUpdateStockModal(e)}))})),document.getElementById("view-all-orders-btn").addEventListener("click",(()=>{AdminCore.showAdminTab("orders")})),document.getElementById("view-all-products-btn").addEventListener("click",(()=>{AdminCore.showAdminTab("products")}))}},AdminOrders={async loadOrders(){try{if(!Auth.isAdmin())return;AdminCore.orders=await API.admin.getOrders(),this.renderOrders()}catch(t){console.error("Load orders error:",t),document.getElementById("admin-orders").innerHTML="<p>注文の読み込みに失敗しました。</p>"}},renderOrders(){const t=document.getElementById("admin-orders");t&&(t.innerHTML=`\n      <div class="admin-filters">\n        <div class="filter-group">\n          <label for="order-status-filter">ステータス:</label>\n          <select id="order-status-filter">\n            <option value="">すべて</option>\n            <option value="pending">受付中</option>\n            <option value="processing">準備中</option>\n            <option value="shipped">発送済み</option>\n            <option value="delivered">配達済み</option>\n            <option value="cancelled">キャンセル</option>\n          </select>\n        </div>\n        <div class="filter-group">\n          <label for="order-payment-filter">支払い状況:</label>\n          <select id="order-payment-filter">\n            <option value="">すべて</option>\n            <option value="pending">未払い</option>\n            <option value="paid">支払い済み</option>\n            <option value="failed">支払い失敗</option>\n            <option value="refunded">返金済み</option>\n          </select>\n        </div>\n        <div class="filter-group">\n          <label for="order-search">検索:</label>\n          <input type="text" id="order-search" placeholder="顧客名、メール、注文番号">\n        </div>\n        <button class="btn" id="apply-order-filters">適用</button>\n      </div>\n      \n      <table class="admin-table">\n        <thead>\n          <tr>\n            <th>注文番号</th>\n            <th>顧客</th>\n            <th>日時</th>\n            <th>金額</th>\n            <th>支払い状況</th>\n            <th>注文状態</th>\n            <th>アクション</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${AdminCore.orders.map((t=>`\n            <tr>\n              <td>${t._id}</td>\n              <td>${t.user?t.user.name:"不明"}</td>\n              <td>${new Date(t.createdAt).toLocaleString("ja-JP")}</td>\n              <td>${new Intl.NumberFormat("ja-JP",{style:"currency",currency:"JPY"}).format(t.totalAmount)}</td>\n              <td>${AdminCore.getPaymentStatusText(t.paymentStatus)}</td>\n              <td>${AdminCore.getStatusText(t.status)}</td>\n              <td>\n                <div class="admin-actions">\n                  <button class="btn view-order-btn" data-id="${t._id}">詳細</button>\n                  <button class="btn update-status-btn" data-id="${t._id}">状態更新</button>\n                </div>\n              </td>\n            </tr>\n          `)).join("")}\n        </tbody>\n      </table>\n    `,this.setupOrdersEventListeners())},setupOrdersEventListeners(){document.querySelectorAll(".view-order-btn").forEach((t=>{t.addEventListener("click",(()=>{const e=t.dataset.id;this.viewOrderDetails(e)}))})),document.querySelectorAll(".update-status-btn").forEach((t=>{t.addEventListener("click",(()=>{const e=t.dataset.id;this.showUpdateStatusModal(e)}))})),document.getElementById("apply-order-filters").addEventListener("click",(()=>{this.applyOrderFilters()}))},async applyOrderFilters(){try{const t=document.getElementById("order-status-filter").value,e=document.getElementById("order-payment-filter").value,n=document.getElementById("order-search").value;AdminCore.orders=await API.admin.getOrders({status:t,paymentStatus:e,search:n}),this.renderOrders()}catch(t){console.error("Apply order filters error:",t),alert("注文フィルターの適用に失敗しました。")}},async viewOrderDetails(t){try{const e=await API.orders.getById(t),n=document.createElement("div");n.className="modal",n.id="admin-order-modal";const a=new Date(e.createdAt),s=new Intl.DateTimeFormat("ja-JP",{year:"numeric",month:"long",day:"numeric",hour:"2-digit",minute:"2-digit"}).format(a),d=new Intl.NumberFormat("ja-JP",{style:"currency",currency:"JPY"}).format(e.totalAmount),o=AdminCore.getStatusClass(e.status),r=AdminCore.getStatusText(e.status),i=AdminCore.getPaymentStatusText(e.paymentStatus),l=AdminCore.getPaymentMethodText(e.paymentMethod);n.innerHTML=`\n        <div class="modal-content">\n          <span class="close">&times;</span>\n          <h2>注文詳細</h2>\n          <div class="order-details">\n            <div class="order-details-header">\n              <div class="order-details-id">注文番号: ${e._id}</div>\n              <div class="order-details-date">注文日時: ${s}</div>\n              <div class="order-details-status ${o}">${r}</div>\n            </div>\n            <div class="order-details-section">\n              <h3>顧客情報</h3>\n              <div class="order-details-customer">\n                <div class="order-details-customer-name">名前: ${e.user.name}</div>\n                <div class="order-details-customer-email">メール: ${e.user.email}</div>\n              </div>\n            </div>\n            <div class="order-details-section">\n              <h3>注文商品</h3>\n              <div class="order-details-items">\n                ${e.items.map((t=>{const e=t.product;if(!e)return"";const n=new Intl.NumberFormat("ja-JP",{style:"currency",currency:"JPY"}).format(t.price);return`\n                    <div class="order-details-item">\n                      <div class="order-details-item-name">${e.name}</div>\n                      <div class="order-details-item-price">${n} × ${t.quantity}</div>\n                      <div class="order-details-item-subtotal">${new Intl.NumberFormat("ja-JP",{style:"currency",currency:"JPY"}).format(t.price*t.quantity)}</div>\n                    </div>\n                  `})).join("")}\n              </div>\n            </div>\n            <div class="order-details-section">\n              <h3>配送先住所</h3>\n              <div class="order-details-addresses">\n                ${e.items.map((t=>{const e=t.shippingAddress;return e?`\n                    <div class="order-details-address">\n                      <div class="order-details-address-product">${t.product.name} (${t.quantity})</div>\n                      <div class="order-details-address-name">${e.name}</div>\n                      <div class="order-details-address-phone">${e.phone}</div>\n                      <div class="order-details-address-location">${e.postalCode} ${e.city} ${e.address}</div>\n                    </div>\n                  `:""})).join("")}\n              </div>\n            </div>\n            <div class="order-details-section">\n              <h3>支払い情報</h3>\n              <div class="order-details-payment">\n                <div class="order-details-payment-method">支払い方法: ${l}</div>\n                <div class="order-details-payment-status">支払い状況: ${i}</div>\n                ${e.paymentDetails&&e.paymentDetails.transactionId?`\n                  <div class="order-details-payment-transaction">取引ID: ${e.paymentDetails.transactionId}</div>\n                `:""}\n              </div>\n            </div>\n            <div class="order-details-section">\n              <h3>配送情報</h3>\n              <div class="order-details-shipping">\n                ${e.shippingDetails&&e.shippingDetails.carrier?`\n                  <div class="order-details-shipping-carrier">配送業者: ${e.shippingDetails.carrier}</div>\n                `:"配送情報はまだありません。"}\n                ${e.shippingDetails&&e.shippingDetails.trackingNumber?`\n                  <div class="order-details-shipping-tracking">追跡番号: ${e.shippingDetails.trackingNumber}</div>\n                `:""}\n                ${e.shippingDetails&&e.shippingDetails.estimatedDelivery?`\n                  <div class="order-details-shipping-delivery">配送予定日: ${new Intl.DateTimeFormat("ja-JP",{year:"numeric",month:"long",day:"numeric"}).format(new Date(e.shippingDetails.estimatedDelivery))}</div>\n                `:""}\n              </div>\n            </div>\n            <div class="order-details-section">\n              <h3>合計金額</h3>\n              <div class="order-details-total">\n                <div class="order-details-total-row">\n                  <span>小計:</span>\n                  <span>${d}</span>\n                </div>\n                <div class="order-details-total-row">\n                  <span>配送料:</span>\n                  <span>¥500</span>\n                </div>\n                <div class="order-details-total-row total">\n                  <span>合計:</span>\n                  <span>${new Intl.NumberFormat("ja-JP",{style:"currency",currency:"JPY"}).format(e.totalAmount+500)}</span>\n                </div>\n              </div>\n            </div>\n            <div class="order-details-actions">\n              <button class="btn update-status-btn" data-id="${e._id}">状態更新</button>\n              <button class="btn update-payment-btn" data-id="${e._id}">支払い状況更新</button>\n              <button class="btn update-shipping-btn" data-id="${e._id}">配送情報更新</button>\n            </div>\n          </div>\n        </div>\n      `,document.body.appendChild(n),n.style.display="block",n.querySelector(".close").addEventListener("click",(()=>{n.style.display="none",n.remove()})),n.querySelector(".update-status-btn").addEventListener("click",(()=>{this.showUpdateStatusModal(t),n.style.display="none",n.remove()})),n.querySelector(".update-payment-btn").addEventListener("click",(()=>{this.showUpdatePaymentModal(t),n.style.display="none",n.remove()})),n.querySelector(".update-shipping-btn").addEventListener("click",(()=>{this.showUpdateShippingModal(t),n.style.display="none",n.remove()})),window.addEventListener("click",(t=>{t.target===n&&(n.style.display="none",n.remove())}))}catch(t){console.error("View order details error:",t),alert("注文詳細の読み込みに失敗しました。")}},async showUpdateStatusModal(t){try{const e=await API.orders.getById(t),n=document.createElement("div");n.className="modal",n.id="update-status-modal",n.innerHTML=`\n        <div class="modal-content">\n          <span class="close">&times;</span>\n          <h2>注文状態の更新</h2>\n          <div class="update-status-form">\n            <div class="form-group">\n              <label for="order-status">注文状態:</label>\n              <select id="order-status">\n                <option value="pending" ${"pending"===e.status?"selected":""}>受付中</option>\n                <option value="processing" ${"processing"===e.status?"selected":""}>準備中</option>\n                <option value="shipped" ${"shipped"===e.status?"selected":""}>発送済み</option>\n                <option value="delivered" ${"delivered"===e.status?"selected":""}>配達済み</option>\n                <option value="cancelled" ${"cancelled"===e.status?"selected":""}>キャンセル</option>\n              </select>\n            </div>\n            <div class="form-actions">\n              <button class="btn" id="cancel-update-status">キャンセル</button>\n              <button class="btn btn-primary" id="save-update-status" data-id="${t}">保存</button>\n            </div>\n          </div>\n        </div>\n      `,document.body.appendChild(n),n.style.display="block",n.querySelector(".close").addEventListener("click",(()=>{n.style.display="none",n.remove()})),n.querySelector("#cancel-update-status").addEventListener("click",(()=>{n.style.display="none",n.remove()})),n.querySelector("#save-update-status").addEventListener("click",(async()=>{const e=document.getElementById("order-status").value;await this.updateOrderStatus(t,e),n.style.display="none",n.remove()})),window.addEventListener("click",(t=>{t.target===n&&(n.style.display="none",n.remove())}))}catch(t){console.error("Show update status modal error:",t),alert("注文状態の更新モーダルの表示に失敗しました。")}},async updateOrderStatus(t,e){try{await API.admin.updateOrderStatus(t,e),await this.loadOrders(),alert("注文状態を更新しました。")}catch(t){console.error("Update order status error:",t),alert(`注文状態の更新に失敗しました: ${t.message}`)}},async showUpdatePaymentModal(t){try{const e=await API.orders.getById(t),n=document.createElement("div");n.className="modal",n.id="update-payment-modal",n.innerHTML=`\n        <div class="modal-content">\n          <span class="close">&times;</span>\n          <h2>支払い状況の更新</h2>\n          <div class="update-payment-form">\n            <div class="form-group">\n              <label for="payment-status">支払い状況:</label>\n              <select id="payment-status">\n                <option value="pending" ${"pending"===e.paymentStatus?"selected":""}>未払い</option>\n                <option value="paid" ${"paid"===e.paymentStatus?"selected":""}>支払い済み</option>\n                <option value="failed" ${"failed"===e.paymentStatus?"selected":""}>支払い失敗</option>\n                <option value="refunded" ${"refunded"===e.paymentStatus?"selected":""}>返金済み</option>\n              </select>\n            </div>\n            <div class="form-group">\n              <label for="transaction-id">取引ID:</label>\n              <input type="text" id="transaction-id" value="${e.paymentDetails&&e.paymentDetails.transactionId?e.paymentDetails.transactionId:""}">\n            </div>\n            <div class="form-actions">\n              <button class="btn" id="cancel-update-payment">キャンセル</button>\n              <button class="btn btn-primary" id="save-update-payment" data-id="${t}">保存</button>\n            </div>\n          </div>\n        </div>\n      `,document.body.appendChild(n),n.style.display="block",n.querySelector(".close").addEventListener("click",(()=>{n.style.display="none",n.remove()})),n.querySelector("#cancel-update-payment").addEventListener("click",(()=>{n.style.display="none",n.remove()})),n.querySelector("#save-update-payment").addEventListener("click",(async()=>{const e=document.getElementById("payment-status").value,a=document.getElementById("transaction-id").value;await this.updatePaymentStatus(t,e,a),n.style.display="none",n.remove()})),window.addEventListener("click",(t=>{t.target===n&&(n.style.display="none",n.remove())}))}catch(t){console.error("Show update payment modal error:",t),alert("支払い状況の更新モーダルの表示に失敗しました。")}},async updatePaymentStatus(t,e,n){try{await API.admin.updatePaymentStatus(t,e,n),await this.loadOrders(),alert("支払い状況を更新しました。")}catch(t){console.error("Update payment status error:",t),alert(`支払い状況の更新に失敗しました: ${t.message}`)}},async showUpdateShippingModal(t){try{const e=await API.orders.getById(t),n=document.createElement("div");n.className="modal",n.id="update-shipping-modal",n.innerHTML=`\n        <div class="modal-content">\n          <span class="close">&times;</span>\n          <h2>配送情報の更新</h2>\n          <div class="update-shipping-form">\n            <div class="form-group">\n              <label for="shipping-carrier">配送業者:</label>\n              <input type="text" id="shipping-carrier" value="${e.shippingDetails&&e.shippingDetails.carrier?e.shippingDetails.carrier:""}">\n            </div>\n            <div class="form-group">\n              <label for="tracking-number">追跡番号:</label>\n              <input type="text" id="tracking-number" value="${e.shippingDetails&&e.shippingDetails.trackingNumber?e.shippingDetails.trackingNumber:""}">\n            </div>\n            <div class="form-group">\n              <label for="estimated-delivery">配送予定日:</label>\n              <input type="date" id="estimated-delivery" value="${e.shippingDetails&&e.shippingDetails.estimatedDelivery?new Date(e.shippingDetails.estimatedDelivery).toISOString().split("T")[0]:""}">\n            </div>\n            <div class="form-actions">\n              <button class="btn" id="cancel-update-shipping">キャンセル</button>\n              <button class="btn btn-primary" id="save-update-shipping" data-id="${t}">保存</button>\n            </div>\n          </div>\n        </div>\n      `,document.body.appendChild(n),n.style.display="block",n.querySelector(".close").addEventListener("click",(()=>{n.style.display="none",n.remove()})),n.querySelector("#cancel-update-shipping").addEventListener("click",(()=>{n.style.display="none",n.remove()})),n.querySelector("#save-update-shipping").addEventListener("click",(async()=>{const e=document.getElementById("shipping-carrier").value,a=document.getElementById("tracking-number").value,s=document.getElementById("estimated-delivery").value,d={carrier:e,trackingNumber:a,estimatedDelivery:s?new Date(s):null};await this.updateShippingDetails(t,d),n.style.display="none",n.remove()})),window.addEventListener("click",(t=>{t.target===n&&(n.style.display="none",n.remove())}))}catch(t){console.error("Show update shipping modal error:",t),alert("配送情報の更新モーダルの表示に失敗しました。")}},async updateShippingDetails(t,e){try{await API.admin.updateShippingDetails(t,e),await this.loadOrders(),alert("配送情報を更新しました。")}catch(t){console.error("Update shipping details error:",t),alert(`配送情報の更新に失敗しました: ${t.message}`)}}},AdminProductsUtils={downloadImportTemplate(){try{const t=new Blob(["ID,商品名,説明,価格,在庫数,単位,カテゴリ,状態,発送までの目安,在庫アラートしきい値,画像URL\n,新鮮なアスパラ,美味しいアスパラです。,300,50,kg,アスパラ,販売中,ご注文から3〜5日以内に発送,10,https://example.com/asparagus.jpg\n,純粋なはちみつ,甘くて美味しいはちみつです。,200,30,kg,はちみつ,販売中,ご注文から3〜5日以内に発送,5,https://example.com/honey.jpg"],{type:"text/csv;charset=utf-8;"}),e=URL.createObjectURL(t),n=document.createElement("a");n.setAttribute("href",e),n.setAttribute("download","products_import_template.csv"),n.style.visibility="hidden",document.body.appendChild(n),n.click(),document.body.removeChild(n)}catch(t){console.error("Download template error:",t),alert(`テンプレートのダウンロードに失敗しました: ${t.message}`)}},async importProducts(){try{const t=document.getElementById("import-file");if(!t.files||0===t.files.length)return void alert("インポートするCSVファイルを選択してください。");const e=t.files[0],n=new FileReader;n.onload=async t=>{try{const e=t.target.result,n=e.split("\n").slice(1).filter((t=>""!==t.trim()));if(0===n.length)return void alert("インポートするデータがありません。");const a=document.getElementById("import-update-existing").checked;let s=0,d=0,o=0;for(const t of n)try{const e=[];let n=!1,r="";for(let a=0;a<t.length;a++){const s=t[a];'"'===s?n=!n:","!==s||n?r+=s:(e.push(r),r="")}e.push(r);const[i,l,c,u,p,m,v,y,h,b,g]=e;if(!l||!c||!u){console.error("Required fields missing:",t),o++;continue}const f={name:l.trim(),description:c.trim(),price:parseFloat(u),stock:p?parseInt(p):0,unit:m?m.trim():"kg",category:v&&["アスパラ","はちみつ"].includes(v.trim())?v.trim():"アスパラ",status:y&&["販売中","販売停止","今季の販売は終了しました"].includes(y.trim())?y.trim():"販売中",shippingEstimate:h?h.trim():"ご注文から3〜5日以内に発送",lowStockThreshold:b?parseInt(b):10,images:g?g.split(",").map((t=>t.trim())).filter((t=>t)):[]};i&&a?(await API.admin.updateProduct(i.trim(),f),d++):(await API.admin.createProduct(f),s++)}catch(e){console.error("Error processing row:",t,e),o++}await AdminProducts.loadProducts(),alert(`インポート完了: ${s} 件追加, ${d} 件更新, ${o} 件エラー`);const r=document.getElementById("import-modal");r&&(r.style.display="none",r.remove())}catch(t){console.error("CSV parse error:",t),alert(`CSVの解析に失敗しました: ${t.message}`)}},n.onerror=()=>{alert("ファイルの読み込みに失敗しました。")},n.readAsText(e)}catch(t){console.error("Import products error:",t),alert(`商品のインポートに失敗しました: ${t.message}`)}}},AdminProductModal={async showProductModal(t=null){try{let e=null;t&&(e=await API.products.getById(t));const n=document.createElement("div");n.className="modal",n.id="product-modal",n.innerHTML=`\n        <div class="modal-content">\n          <span class="close">&times;</span>\n          <h2>${t?"商品の編集":"新しい商品の追加"}</h2>\n          <div class="product-form">\n            <div class="form-group">\n              <label for="product-name">商品名:</label>\n              <input type="text" id="product-name" value="${e?e.name:""}">\n            </div>\n            <div class="form-group">\n              <label for="product-description">説明:</label>\n              <textarea id="product-description">${e?e.description:""}</textarea>\n            </div>\n            <div class="form-group">\n              <label for="product-price">価格:</label>\n              <input type="number" id="product-price" value="${e?e.price:""}" min="0">\n            </div>\n            <div class="form-group">\n              <label for="product-stock">在庫数:</label>\n              <input type="number" id="product-stock" value="${e?e.stock:"0"}" min="0">\n            </div>\n            <div class="form-group">\n              <label for="product-unit">単位:</label>\n              <input type="text" id="product-unit" value="${e?e.unit:"kg"}">\n            </div>\n            <div class="form-group">\n              <label for="product-category">カテゴリ:</label>\n              <select id="product-category">\n                <option value="アスパラ" ${e&&"アスパラ"===e.category?"selected":""}>アスパラ</option>\n                <option value="はちみつ" ${e&&"はちみつ"===e.category?"selected":""}>はちみつ</option>\n              </select>\n            </div>\n            <div class="form-group">\n              <label for="product-status">状態:</label>\n              <select id="product-status">\n                <option value="販売中" ${e&&"販売中"!==e.status?"":"selected"}>販売中</option>\n                <option value="販売停止" ${e&&"販売停止"===e.status?"selected":""}>販売停止</option>\n                <option value="今季の販売は終了しました" ${e&&"今季の販売は終了しました"===e.status?"selected":""}>今季の販売は終了しました</option>\n              </select>\n            </div>\n            <div class="form-group">\n              <label for="product-shipping-estimate">発送までの目安:</label>\n              <input type="text" id="product-shipping-estimate" value="${e&&e.shippingEstimate?e.shippingEstimate:"ご注文から3〜5日以内に発送"}">\n              <div class="form-hint">例: ご注文から3〜5日以内に発送</div>\n            </div>\n            <div class="form-group">\n              <label for="product-images">画像URL (カンマ区切り):</label>\n              <input type="text" id="product-images" value="${e&&e.images?e.images.join(","):""}">\n            </div>\n            <div class="form-group">\n              <label for="product-threshold">在庫アラートしきい値:</label>\n              <input type="number" id="product-threshold" value="${e?e.lowStockThreshold:"10"}" min="0">\n            </div>\n            <div class="form-actions">\n              <button class="btn" id="cancel-product">キャンセル</button>\n              <button class="btn btn-primary" id="save-product" data-id="${t||""}">保存</button>\n            </div>\n          </div>\n        </div>\n      `,document.body.appendChild(n),n.style.display="block",n.querySelector(".close").addEventListener("click",(()=>{n.style.display="none",n.remove()})),n.querySelector("#cancel-product").addEventListener("click",(()=>{n.style.display="none",n.remove()})),n.querySelector("#save-product").addEventListener("click",(async()=>{const e={name:document.getElementById("product-name").value,description:document.getElementById("product-description").value,price:parseFloat(document.getElementById("product-price").value),stock:parseInt(document.getElementById("product-stock").value),unit:document.getElementById("product-unit").value,category:document.getElementById("product-category").value,status:document.getElementById("product-status").value,shippingEstimate:document.getElementById("product-shipping-estimate").value,images:document.getElementById("product-images").value.split(",").map((t=>t.trim())).filter((t=>t)),lowStockThreshold:parseInt(document.getElementById("product-threshold").value)};t?await AdminProducts.updateProduct(t,e):await AdminProducts.createProduct(e),n.style.display="none",n.remove()})),window.addEventListener("click",(t=>{t.target===n&&(n.style.display="none",n.remove())}))}catch(t){console.error("Show product modal error:",t),alert("商品モーダルの表示に失敗しました。")}},async showUpdateStockModal(t){try{const e=await API.products.getById(t),n=document.createElement("div");n.className="modal",n.id="update-stock-modal",n.innerHTML=`\n        <div class="modal-content">\n          <span class="close">&times;</span>\n          <h2>在庫数の更新</h2>\n          <div class="update-stock-form">\n            <div class="product-info">\n              <div class="product-name">${e.name}</div>\n              <div class="product-category">${AdminCore.getCategoryText(e.category)}</div>\n              <div class="product-stock">現在の在庫: ${e.stock} ${e.unit}</div>\n            </div>\n            <div class="form-group">\n              <label for="stock-quantity">新しい在庫数:</label>\n              <input type="number" id="stock-quantity" value="${e.stock}" min="0">\n            </div>\n            <div class="form-actions">\n              <button class="btn" id="cancel-update-stock">キャンセル</button>\n              <button class="btn btn-primary" id="save-update-stock" data-id="${t}">保存</button>\n            </div>\n          </div>\n        </div>\n      `,document.body.appendChild(n),n.style.display="block",n.querySelector(".close").addEventListener("click",(()=>{n.style.display="none",n.remove()})),n.querySelector("#cancel-update-stock").addEventListener("click",(()=>{n.style.display="none",n.remove()})),n.querySelector("#save-update-stock").addEventListener("click",(async()=>{const e=parseInt(document.getElementById("stock-quantity").value);await AdminProducts.updateProductStock(t,e),n.style.display="none",n.remove()})),window.addEventListener("click",(t=>{t.target===n&&(n.style.display="none",n.remove())}))}catch(t){console.error("Show update stock modal error:",t),alert("在庫数の更新モーダルの表示に失敗しました。")}},async showShippingEstimateModal(t){try{const e=await API.products.getById(t),n=document.createElement("div");n.className="modal",n.id="shipping-estimate-modal",n.innerHTML=`\n        <div class="modal-content">\n          <span class="close">&times;</span>\n          <h2>発送までの目安の設定</h2>\n          <div class="shipping-estimate-form">\n            <div class="product-info">\n              <div class="product-name">${e.name}</div>\n              <div class="product-category">${AdminCore.getCategoryText(e.category)}</div>\n              <div class="product-status">状態: ${e.status}</div>\n            </div>\n            <div class="form-group">\n              <label for="shipping-estimate">発送までの目安:</label>\n              <input type="text" id="shipping-estimate" value="${e.shippingEstimate||"ご注文から3〜5日以内に発送"}">\n              <div class="form-hint">例: ご注文から3〜5日以内に発送</div>\n            </div>\n            <div class="form-actions">\n              <button class="btn" id="cancel-shipping-estimate">キャンセル</button>\n              <button class="btn btn-primary" id="save-shipping-estimate" data-id="${t}">保存</button>\n            </div>\n          </div>\n        </div>\n      `,document.body.appendChild(n),n.style.display="block",n.querySelector(".close").addEventListener("click",(()=>{n.style.display="none",n.remove()})),n.querySelector("#cancel-shipping-estimate").addEventListener("click",(()=>{n.style.display="none",n.remove()})),n.querySelector("#save-shipping-estimate").addEventListener("click",(async()=>{const e=document.getElementById("shipping-estimate").value;await AdminProducts.updateShippingEstimate(t,e),n.style.display="none",n.remove()})),window.addEventListener("click",(t=>{t.target===n&&(n.style.display="none",n.remove())}))}catch(t){console.error("Show shipping estimate modal error:",t),alert("発送目安の設定モーダルの表示に失敗しました。")}},showImportModal(){try{const t=document.createElement("div");t.className="modal",t.id="import-modal",t.innerHTML='\n        <div class="modal-content">\n          <span class="close">&times;</span>\n          <h2>商品のインポート</h2>\n          <div class="import-form">\n            <p>CSVファイルから商品をインポートします。CSVファイルは以下の列を含む必要があります：</p>\n            <ul>\n              <li>商品名 (必須)</li>\n              <li>説明 (必須)</li>\n              <li>価格 (必須)</li>\n              <li>在庫数</li>\n              <li>単位</li>\n              <li>カテゴリ (アスパラ, はちみつ のいずれか)</li>\n              <li>状態 (販売中, 販売停止, 今季の販売は終了しました)</li>\n              <li>発送までの目安</li>\n              <li>在庫アラートしきい値</li>\n              <li>画像URL (カンマ区切り)</li>\n            </ul>\n            <div class="form-group">\n              <label for="import-file">CSVファイル:</label>\n              <input type="file" id="import-file" accept=".csv">\n            </div>\n            <div class="form-group">\n              <label>\n                <input type="checkbox" id="import-update-existing">\n                既存の商品を更新する (IDで一致する場合)\n              </label>\n            </div>\n            <div class="form-actions">\n              <button class="btn" id="cancel-import">キャンセル</button>\n              <button class="btn btn-primary" id="start-import">インポート</button>\n            </div>\n            <div class="import-template">\n              <a href="#" id="download-template">インポート用テンプレートをダウンロード</a>\n            </div>\n          </div>\n        </div>\n      ',document.body.appendChild(t),t.style.display="block",t.querySelector(".close").addEventListener("click",(()=>{t.style.display="none",t.remove()})),t.querySelector("#cancel-import").addEventListener("click",(()=>{t.style.display="none",t.remove()})),t.querySelector("#download-template").addEventListener("click",(t=>{t.preventDefault(),AdminProducts.downloadImportTemplate()})),t.querySelector("#start-import").addEventListener("click",(()=>{AdminProducts.importProducts()})),window.addEventListener("click",(e=>{e.target===t&&(t.style.display="none",t.remove())}))}catch(t){console.error("Show import modal error:",t),alert(`インポートモーダルの表示に失敗しました: ${t.message}`)}}},AdminProducts={async loadProducts(){try{if(!Auth.isAdmin())return;AdminCore.products=await API.products.getAll(),this.renderProducts()}catch(t){console.error("Load products error:",t),document.getElementById("admin-products").innerHTML="<p>商品の読み込みに失敗しました。</p>"}},filterAndSortProducts(t,e={},n={field:"name",order:"asc"}){let a=[...t];if(e.category&&"all"!==e.category&&(a=a.filter((t=>t.category===e.category))),e.status&&"all"!==e.status&&(a=a.filter((t=>t.status===e.status))),e.stock&&"all"!==e.stock&&("inStock"===e.stock?a=a.filter((t=>t.stock>0)):"outOfStock"===e.stock?a=a.filter((t=>0===t.stock)):"lowStock"===e.stock&&(a=a.filter((t=>t.stock<=t.lowStockThreshold&&t.stock>0)))),e.search){const t=e.search.toLowerCase();a=a.filter((e=>e.name.toLowerCase().includes(t)||e.description.toLowerCase().includes(t)))}return a.sort(((t,e)=>{let a,s;switch(n.field){case"name":default:a=t.name.toLowerCase(),s=e.name.toLowerCase();break;case"price":a=t.price,s=e.price;break;case"stock":a=t.stock,s=e.stock;break;case"category":a=t.category,s=e.category;break;case"createdAt":a=new Date(t.createdAt),s=new Date(e.createdAt)}return"asc"===n.order?a>s?1:-1:a<s?1:-1})),a},renderProducts(){const t=document.getElementById("admin-products");if(!t)return;const e={category:document.getElementById("product-category-filter")?.value||"all",status:document.getElementById("product-status-filter")?.value||"all",stock:document.getElementById("product-stock-filter")?.value||"all",search:document.getElementById("product-search")?.value||""},n={field:document.getElementById("product-sort-field")?.value||"name",order:document.getElementById("product-sort-order")?.value||"asc"},a=this.filterAndSortProducts(AdminCore.products,e,n);t.innerHTML=`\n      <div class="admin-actions-top">\n        <div class="admin-actions-left">\n          <button class="btn btn-primary" id="add-product-btn">新しい商品を追加</button>\n          <button class="btn" id="bulk-actions-btn">一括操作</button>\n          <button class="btn" id="export-products-btn">エクスポート</button>\n          <button class="btn" id="import-products-btn">インポート</button>\n        </div>\n        <div class="admin-actions-right">\n          <span class="product-count">${a.length} 件の商品</span>\n        </div>\n      </div>\n      \n      <div class="admin-filters">\n        <div class="filter-group">\n          <input type="text" id="product-search" placeholder="商品を検索..." value="${e.search}">\n        </div>\n        <div class="filter-group">\n          <select id="product-category-filter">\n            <option value="all" ${"all"===e.category?"selected":""}>すべてのカテゴリ</option>\n            <option value="アスパラ" ${"アスパラ"===e.category?"selected":""}>アスパラ</option>\n            <option value="はちみつ" ${"はちみつ"===e.category?"selected":""}>はちみつ</option>\n          </select>\n        </div>\n        <div class="filter-group">\n          <select id="product-status-filter">\n            <option value="all" ${"all"===e.status?"selected":""}>すべての状態</option>\n            <option value="販売中" ${"販売中"===e.status?"selected":""}>販売中</option>\n            <option value="販売停止" ${"販売停止"===e.status?"selected":""}>販売停止</option>\n            <option value="今季の販売は終了しました" ${"今季の販売は終了しました"===e.status?"selected":""}>今季の販売は終了しました</option>\n          </select>\n        </div>\n        <div class="filter-group">\n          <select id="product-stock-filter">\n            <option value="all" ${"all"===e.stock?"selected":""}>すべての在庫状態</option>\n            <option value="inStock" ${"inStock"===e.stock?"selected":""}>在庫あり</option>\n            <option value="outOfStock" ${"outOfStock"===e.stock?"selected":""}>在庫切れ</option>\n            <option value="lowStock" ${"lowStock"===e.stock?"selected":""}>在庫少</option>\n          </select>\n        </div>\n        <div class="filter-group">\n          <select id="product-sort-field">\n            <option value="name" ${"name"===n.field?"selected":""}>商品名</option>\n            <option value="price" ${"price"===n.field?"selected":""}>価格</option>\n            <option value="stock" ${"stock"===n.field?"selected":""}>在庫数</option>\n            <option value="category" ${"category"===n.field?"selected":""}>カテゴリ</option>\n            <option value="createdAt" ${"createdAt"===n.field?"selected":""}>登録日</option>\n          </select>\n          <select id="product-sort-order">\n            <option value="asc" ${"asc"===n.order?"selected":""}>昇順</option>\n            <option value="desc" ${"desc"===n.order?"selected":""}>降順</option>\n          </select>\n        </div>\n        <button class="btn" id="apply-product-filters">適用</button>\n        <button class="btn" id="reset-product-filters">リセット</button>\n      </div>\n      \n      <div class="bulk-actions-panel" style="display: none;">\n        <div class="bulk-action-options">\n          <select id="bulk-action-select">\n            <option value="">一括操作を選択...</option>\n            <option value="setOnSale">販売中に設定</option>\n            <option value="setStopped">販売停止に設定</option>\n            <option value="setSeasonEnded">今季の販売は終了しましたに設定</option>\n            <option value="delete">削除</option>\n            <option value="updateStock">在庫数更新</option>\n          </select>\n          <div id="bulk-stock-input" style="display: none;">\n            <input type="number" id="bulk-stock-value" min="0" placeholder="新しい在庫数">\n          </div>\n          <button class="btn" id="apply-bulk-action">適用</button>\n          <button class="btn" id="cancel-bulk-action">キャンセル</button>\n        </div>\n        <div class="bulk-action-info">\n          <span>0 件選択中</span>\n        </div>\n      </div>\n      \n      <table class="admin-table">\n        <thead>\n          <tr>\n            <th>\n              <input type="checkbox" id="select-all-products">\n            </th>\n            <th>商品名</th>\n            <th>カテゴリ</th>\n            <th>価格</th>\n            <th>在庫数</th>\n            <th>状態</th>\n            <th>アクション</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${a.length>0?a.map((t=>`\n            <tr class="${t.stock<=t.lowStockThreshold&&t.stock>0?"low-stock":""} ${0===t.stock?"out-of-stock":""}">\n              <td>\n                <input type="checkbox" class="product-select" data-id="${t._id}">\n              </td>\n              <td>${t.name}</td>\n              <td>${AdminCore.getCategoryText(t.category)}</td>\n              <td>${new Intl.NumberFormat("ja-JP",{style:"currency",currency:"JPY"}).format(t.price)}</td>\n              <td>\n                <div class="stock-display">\n                  <span class="stock-value ${t.stock<=t.lowStockThreshold?"low-stock-text":""}">${t.stock}</span> ${t.unit}\n                  <div class="quick-stock-update">\n                    <button class="btn btn-small decrement-stock" data-id="${t._id}" ${t.stock<=0?"disabled":""}>-</button>\n                    <button class="btn btn-small increment-stock" data-id="${t._id}">+</button>\n                  </div>\n                </div>\n              </td>\n              <td>\n                <div class="status-display">\n                  <select class="status-select" data-id="${t._id}">\n                    <option value="販売中" ${"販売中"===t.status?"selected":""}>販売中</option>\n                    <option value="販売停止" ${"販売停止"===t.status?"selected":""}>販売停止</option>\n                    <option value="今季の販売は終了しました" ${"今季の販売は終了しました"===t.status?"selected":""}>今季の販売は終了しました</option>\n                  </select>\n                </div>\n              </td>\n              <td>\n                <div class="admin-actions">\n                  <button class="btn edit-product-btn" data-id="${t._id}">編集</button>\n                  <button class="btn update-stock-btn" data-id="${t._id}">在庫更新</button>\n                  <button class="btn shipping-estimate-btn" data-id="${t._id}">発送目安</button>\n                  <button class="btn delete-product-btn" data-id="${t._id}">削除</button>\n                </div>\n              </td>\n            </tr>\n          `)).join(""):'\n            <tr>\n              <td colspan="7" class="no-products">\n                <p>商品が見つかりません。フィルターを変更するか、新しい商品を追加してください。</p>\n              </td>\n            </tr>\n          '}\n        </tbody>\n      </table>\n    `,this.setupProductsEventListeners()},setupProductsEventListeners(){document.getElementById("add-product-btn")?.addEventListener("click",(()=>{AdminProductModal.showProductModal()})),document.querySelectorAll(".edit-product-btn").forEach((t=>{t.addEventListener("click",(()=>{const e=t.dataset.id;AdminProductModal.showProductModal(e)}))})),document.querySelectorAll(".update-stock-btn").forEach((t=>{t.addEventListener("click",(()=>{const e=t.dataset.id;AdminProductModal.showUpdateStockModal(e)}))})),document.querySelectorAll(".shipping-estimate-btn").forEach((t=>{t.addEventListener("click",(()=>{const e=t.dataset.id;AdminProductModal.showShippingEstimateModal(e)}))})),document.querySelectorAll(".delete-product-btn").forEach((t=>{t.addEventListener("click",(()=>{const e=t.dataset.id;this.deleteProduct(e)}))})),document.querySelectorAll(".increment-stock").forEach((t=>{t.addEventListener("click",(async e=>{e.stopPropagation();const n=t.dataset.id,a=AdminCore.products.find((t=>t._id===n));a&&await this.updateProductStock(n,a.stock+1)}))})),document.querySelectorAll(".decrement-stock").forEach((t=>{t.addEventListener("click",(async e=>{e.stopPropagation();const n=t.dataset.id,a=AdminCore.products.find((t=>t._id===n));a&&a.stock>0&&await this.updateProductStock(n,a.stock-1)}))})),document.querySelectorAll(".status-select").forEach((t=>{t.addEventListener("change",(async()=>{const e=t.dataset.id,n=t.value;await this.updateProductStatus(e,n)}))})),document.getElementById("apply-product-filters")?.addEventListener("click",(()=>{this.renderProducts()})),document.getElementById("reset-product-filters")?.addEventListener("click",(()=>{document.getElementById("product-search")&&(document.getElementById("product-search").value=""),document.getElementById("product-category-filter")&&(document.getElementById("product-category-filter").value="all"),document.getElementById("product-status-filter")&&(document.getElementById("product-status-filter").value="all"),document.getElementById("product-stock-filter")&&(document.getElementById("product-stock-filter").value="all"),document.getElementById("product-sort-field")&&(document.getElementById("product-sort-field").value="name"),document.getElementById("product-sort-order")&&(document.getElementById("product-sort-order").value="asc"),this.renderProducts()})),document.getElementById("bulk-actions-btn")?.addEventListener("click",(()=>{const t=document.querySelector(".bulk-actions-panel");t&&(t.style.display="none"===t.style.display?"flex":"none")})),document.getElementById("bulk-action-select")?.addEventListener("change",(()=>{const t=document.getElementById("bulk-action-select").value,e=document.getElementById("bulk-stock-input");e.style.display="updateStock"===t?"inline-block":"none"})),document.getElementById("apply-bulk-action")?.addEventListener("click",(()=>{this.applyBulkAction()})),document.getElementById("cancel-bulk-action")?.addEventListener("click",(()=>{const t=document.querySelector(".bulk-actions-panel");t&&(t.style.display="none"),document.getElementById("select-all-products").checked=!1,document.querySelectorAll(".product-select").forEach((t=>{t.checked=!1})),this.updateSelectedCount()})),document.getElementById("select-all-products")?.addEventListener("change",(t=>{const e=t.target.checked;document.querySelectorAll(".product-select").forEach((t=>{t.checked=e})),this.updateSelectedCount()})),document.querySelectorAll(".product-select").forEach((t=>{t.addEventListener("change",(()=>{this.updateSelectedCount();const t=document.querySelectorAll(".product-select"),e=document.querySelectorAll(".product-select:checked");document.getElementById("select-all-products").checked=t.length>0&&t.length===e.length}))})),document.getElementById("export-products-btn")?.addEventListener("click",(()=>{this.exportProducts()})),document.getElementById("import-products-btn")?.addEventListener("click",(()=>{AdminProductModal.showImportModal()}))},updateSelectedCount(){const t=document.querySelectorAll(".product-select:checked").length,e=document.querySelector(".bulk-action-info span");e&&(e.textContent=`${t} 件選択中`)},async applyBulkAction(){const t=Array.from(document.querySelectorAll(".product-select:checked")).map((t=>t.dataset.id));if(0===t.length)return void alert("操作を適用する商品を選択してください。");const e=document.getElementById("bulk-action-select").value;if(e){if(confirm(`選択した ${t.length} 件の商品に対して操作を実行してもよろしいですか？`))try{switch(e){case"setOnSale":await this.bulkUpdateStatus(t,"販売中");break;case"setStopped":await this.bulkUpdateStatus(t,"販売停止");break;case"setSeasonEnded":await this.bulkUpdateStatus(t,"今季の販売は終了しました");break;case"delete":await this.bulkDeleteProducts(t);break;case"updateStock":const e=parseInt(document.getElementById("bulk-stock-value").value);if(isNaN(e)||e<0)return void alert("有効な在庫数を入力してください。");await this.bulkUpdateStock(t,e)}const n=document.querySelector(".bulk-actions-panel");n&&(n.style.display="none"),await this.loadProducts(),alert("一括操作が完了しました。")}catch(t){console.error("Bulk action error:",t),alert(`一括操作に失敗しました: ${t.message}`)}}else alert("適用する操作を選択してください。")},async bulkUpdateStatus(t,e){for(const n of t)await API.admin.updateProductStatus(n,e)},async bulkDeleteProducts(t){for(const e of t)await API.admin.deleteProduct(e)},async bulkUpdateStock(t,e){for(const n of t)await API.admin.updateProductStock(n,e)},async updateProductStatus(t,e){try{await API.admin.updateProductStatus(t,e),await this.loadProducts()}catch(t){console.error("Update product status error:",t),alert(`商品の状態の更新に失敗しました: ${t.message}`)}},async updateProductStock(t,e){try{await API.admin.updateProductStock(t,e),await this.loadProducts(),alert("在庫数を更新しました。")}catch(t){console.error("Update product stock error:",t),alert(`在庫数の更新に失敗しました: ${t.message}`)}},async updateShippingEstimate(t,e){try{await API.admin.updateShippingEstimate(t,e),await this.loadProducts(),alert("発送までの目安を更新しました。")}catch(t){console.error("Update shipping estimate error:",t),alert(`発送までの目安の更新に失敗しました: ${t.message}`)}},async createProduct(t){try{if(!t.name||!t.description||isNaN(t.price)||t.price<0)throw new Error("商品名、説明、価格は必須です。");await API.admin.createProduct(t),await this.loadProducts(),alert("商品を追加しました。")}catch(t){console.error("Create product error:",t),alert(`商品の追加に失敗しました: ${t.message}`)}},async updateProduct(t,e){try{if(!e.name||!e.description||isNaN(e.price)||e.price<0)throw new Error("商品名、説明、価格は必須です。");await API.admin.updateProduct(t,e),await this.loadProducts(),alert("商品を更新しました。")}catch(t){console.error("Update product error:",t),alert(`商品の更新に失敗しました: ${t.message}`)}},async deleteProduct(t){try{if(!confirm("この商品を削除してもよろしいですか？"))return;await API.admin.deleteProduct(t),await this.loadProducts(),alert("商品を削除しました。")}catch(t){console.error("Delete product error:",t),alert(`商品の削除に失敗しました: ${t.message}`)}},exportProducts(){try{const t={category:document.getElementById("product-category-filter")?.value||"all",status:document.getElementById("product-status-filter")?.value||"all",stock:document.getElementById("product-stock-filter")?.value||"all",search:document.getElementById("product-search")?.value||""},e={field:document.getElementById("product-sort-field")?.value||"name",order:document.getElementById("product-sort-order")?.value||"asc"},n=this.filterAndSortProducts(AdminCore.products,t,e);let a="ID,商品名,説明,価格,在庫数,単位,カテゴリ,状態,発送までの目安,在庫アラートしきい値,画像URL\n";n.forEach((t=>{const e=[t._id,`"${t.name.replace(/"/g,'""')}"`,`"${t.description.replace(/"/g,'""')}"`,t.price,t.stock,t.unit,t.category,t.status,`"${t.shippingEstimate?.replace(/"/g,'""')||""}"`,t.lowStockThreshold,`"${t.images.join(",").replace(/"/g,'""')}"`];a+=e.join(",")+"\n"}));const s=new Blob([a],{type:"text/csv;charset=utf-8;"}),d=URL.createObjectURL(s),o=document.createElement("a");o.setAttribute("href",d),o.setAttribute("download",`products_export_${(new Date).toISOString().slice(0,10)}.csv`),o.style.visibility="hidden",document.body.appendChild(o),o.click(),document.body.removeChild(o)}catch(t){console.error("Export products error:",t),alert(`商品のエクスポートに失敗しました: ${t.message}`)}}},AdminUsers={async loadUsers(){try{if(!Auth.isAdmin())return;AdminCore.users=await API.admin.getUsers(),this.renderUsers()}catch(t){console.error("Load users error:",t),document.getElementById("admin-users").innerHTML="<p>ユーザーの読み込みに失敗しました。</p>"}},renderUsers(){const t=document.getElementById("admin-users");t&&(t.innerHTML=`\n      <table class="admin-table">\n        <thead>\n          <tr>\n            <th>名前</th>\n            <th>メールアドレス</th>\n            <th>役割</th>\n            <th>登録日</th>\n            <th>アクション</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${AdminCore.users.map((t=>`\n            <tr>\n              <td>${t.name}</td>\n              <td>${t.email}</td>\n              <td>${"admin"===t.role?"管理者":"顧客"}</td>\n              <td>${new Date(t.createdAt).toLocaleDateString("ja-JP")}</td>\n              <td>\n                <div class="admin-actions">\n                  <button class="btn view-user-btn" data-id="${t._id}">詳細</button>\n                  <button class="btn change-role-btn" data-id="${t._id}" data-role="${t.role}">\n                    ${"admin"===t.role?"顧客に変更":"管理者に変更"}\n                  </button>\n                </div>\n              </td>\n            </tr>\n          `)).join("")}\n        </tbody>\n      </table>\n    `,this.setupUsersEventListeners())},setupUsersEventListeners(){document.querySelectorAll(".view-user-btn").forEach((t=>{t.addEventListener("click",(()=>{const e=t.dataset.id;this.viewUserDetails(e)}))})),document.querySelectorAll(".change-role-btn").forEach((t=>{t.addEventListener("click",(()=>{const e=t.dataset.id,n="admin"===t.dataset.role?"customer":"admin";this.changeUserRole(e,n)}))}))},async viewUserDetails(t){try{const e=AdminCore.users.find((e=>e._id===t));if(!e)throw new Error("ユーザーが見つかりませんでした。");const n=document.createElement("div");n.className="modal",n.id="user-details-modal";const a=new Date(e.createdAt),s=new Intl.DateTimeFormat("ja-JP",{year:"numeric",month:"long",day:"numeric"}).format(a);n.innerHTML=`\n        <div class="modal-content">\n          <span class="close">&times;</span>\n          <h2>ユーザー詳細</h2>\n          <div class="user-details">\n            <div class="user-details-section">\n              <h3>基本情報</h3>\n              <div class="user-details-info">\n                <div class="user-details-name">名前: ${e.name}</div>\n                <div class="user-details-email">メール: ${e.email}</div>\n                <div class="user-details-role">役割: ${"admin"===e.role?"管理者":"顧客"}</div>\n                <div class="user-details-date">登録日: ${s}</div>\n              </div>\n            </div>\n            <div class="user-details-section">\n              <h3>住所</h3>\n              <div class="user-details-addresses">\n                ${e.addresses&&e.addresses.length>0?e.addresses.map((t=>`\n                  <div class="user-details-address">\n                    <div class="user-details-address-name">${t.name}</div>\n                    <div class="user-details-address-phone">${t.phone}</div>\n                    <div class="user-details-address-location">${t.postalCode} ${t.city} ${t.address}</div>\n                    ${t.isDefault?'<div class="user-details-address-default">デフォルト</div>':""}\n                  </div>\n                `)).join(""):"<p>住所が登録されていません。</p>"}\n              </div>\n            </div>\n            <div class="user-details-actions">\n              <button class="btn change-role-btn" data-id="${t}" data-role="${e.role}">\n                ${"admin"===e.role?"顧客に変更":"管理者に変更"}\n              </button>\n            </div>\n          </div>\n        </div>\n      `,document.body.appendChild(n),n.style.display="block",n.querySelector(".close").addEventListener("click",(()=>{n.style.display="none",n.remove()})),n.querySelector(".change-role-btn").addEventListener("click",(()=>{const a="admin"===e.role?"customer":"admin";this.changeUserRole(t,a),n.style.display="none",n.remove()})),window.addEventListener("click",(t=>{t.target===n&&(n.style.display="none",n.remove())}))}catch(t){console.error("View user details error:",t),alert("ユーザー詳細の読み込みに失敗しました。")}},async changeUserRole(t,e){try{if(!confirm(`このユーザーの役割を${"admin"===e?"管理者":"顧客"}に変更してもよろしいですか？`))return;await API.admin.updateUserRole(t,e),await this.loadUsers(),alert("ユーザーの役割を更新しました。")}catch(t){console.error("Change user role error:",t),alert(`ユーザーの役割の更新に失敗しました: ${t.message}`)}}},AdminReports={async loadReports(){try{if(!Auth.isAdmin())return;AdminCore.salesReport=await API.admin.getSalesReport({period:"daily"}),AdminCore.productReport=await API.admin.getProductReport(),this.renderReports()}catch(t){console.error("Load reports error:",t),document.getElementById("admin-reports").innerHTML="<p>レポートの読み込みに失敗しました。</p>"}},renderReports(){const t=document.getElementById("admin-reports");if(!t||!AdminCore.salesReport||!AdminCore.productReport)return;const e=t=>new Intl.NumberFormat("ja-JP",{style:"currency",currency:"JPY"}).format(t);t.innerHTML=`\n      <div class="report-tabs">\n        <button class="report-tab-btn active" data-report-tab="sales">売上レポート</button>\n        <button class="report-tab-btn" data-report-tab="products">商品レポート</button>\n      </div>\n      \n      <div class="report-tab-content">\n        <div id="sales-report" class="report-tab-panel active">\n          <div class="report-filters">\n            <div class="filter-group">\n              <label for="sales-period-filter">期間:</label>\n              <select id="sales-period-filter">\n                <option value="daily" selected>日次</option>\n                <option value="weekly">週次</option>\n                <option value="monthly">月次</option>\n                <option value="yearly">年次</option>\n              </select>\n            </div>\n            <button class="btn" id="apply-sales-filters">適用</button>\n          </div>\n          \n          <div class="report-summary">\n            <div class="summary-card">\n              <div class="summary-value">${e(AdminCore.salesReport.summary.totalRevenue)}</div>\n              <div class="summary-label">総売上</div>\n            </div>\n            <div class="summary-card">\n              <div class="summary-value">${AdminCore.salesReport.summary.totalOrders}</div>\n              <div class="summary-label">総注文数</div>\n            </div>\n            <div class="summary-card">\n              <div class="summary-value">${e(AdminCore.salesReport.summary.averageOrderValue)}</div>\n              <div class="summary-label">平均注文金額</div>\n            </div>\n          </div>\n          \n          <div class="report-chart">\n            <h3>売上推移</h3>\n            <div class="chart-container">\n              \x3c!-- Chart would be rendered here in a real application --\x3e\n              <table class="report-table">\n                <thead>\n                  <tr>\n                    <th>日付</th>\n                    <th>注文数</th>\n                    <th>売上</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  ${AdminCore.salesReport.salesData.map((t=>`\n                    <tr>\n                      <td>${t.date}</td>\n                      <td>${t.orderCount}</td>\n                      <td>${e(t.revenue)}</td>\n                    </tr>\n                  `)).join("")}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n        \n        <div id="products-report" class="report-tab-panel">\n          <div class="report-summary">\n            <h3>商品別売上</h3>\n            <table class="report-table">\n              <thead>\n                <tr>\n                  <th>商品名</th>\n                  <th>カテゴリ</th>\n                  <th>販売数</th>\n                  <th>売上</th>\n                  <th>注文数</th>\n                </tr>\n              </thead>\n              <tbody>\n                ${AdminCore.productReport.productData.map((t=>`\n                  <tr>\n                    <td>${t.name}</td>\n                    <td>${AdminCore.getCategoryText(t.category)}</td>\n                    <td>${t.totalQuantity}</td>\n                    <td>${e(t.totalRevenue)}</td>\n                    <td>${t.orderCount}</td>\n                  </tr>\n                `)).join("")}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    `,this.setupReportsEventListeners()},setupReportsEventListeners(){document.querySelectorAll(".report-tab-btn").forEach((t=>{t.addEventListener("click",(()=>{const e=t.dataset.reportTab;this.showReportTab(e)}))})),document.getElementById("apply-sales-filters").addEventListener("click",(()=>{this.applySalesFilters()}))},showReportTab(t){document.querySelectorAll(".report-tab-btn").forEach((t=>{t.classList.remove("active")})),document.querySelector(`.report-tab-btn[data-report-tab="${t}"]`).classList.add("active"),document.querySelectorAll(".report-tab-panel").forEach((t=>{t.classList.remove("active")})),document.getElementById(`${t}-report`).classList.add("active")},async applySalesFilters(){try{const t=document.getElementById("sales-period-filter").value;AdminCore.salesReport=await API.admin.getSalesReport({period:t}),this.renderReports()}catch(t){console.error("Apply sales filters error:",t),alert("売上レポートフィルターの適用に失敗しました。")}}};